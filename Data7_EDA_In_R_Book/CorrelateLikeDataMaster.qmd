---
bibliography: references.bib
---

# Correlating Like a Data Master {.unnumbered}

```{r setup, include = FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## Purpose of this chapter

**Assess relationships within a novel data set using publication quality tables and plots**

------------------------------------------------------------------------

## Take-aways

1.  Describe and visualize correlations between numerical variables
2.  Visualize correlations of all numerical variables within groups
3.  Describe and visualize relationships based on target variables

------------------------------------------------------------------------

### Required setup

We first need to prepare our environment with the necessary packages.

```{r req-setup}
options(repos = list(CRAN = "http://cran.rstudio.com/"))

install.packages("pacman")

library(pacman)

p_load(colorblindr,
       dlookr,
       formattable,
       GGally,
       ggdist,
       ggpubr,
       ggridges,
       here,
       tidyverse)

# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 12)) 
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank()) 
# Remove legend key
theme_update(legend.key = element_blank())
```

------------------------------------------------------------------------

## Load the Examine a Data Set

We will be using open source data from UArizona researchers that investigates the effects of climate change on canopy trees. [@meredith2021]

```{r load-data}
# Let's load the canopy tree data set
dataset <- read.csv(here("Data7_EDA_In_R_Book", "data", "Data_Fig2_Repo.csv"))

# What does the data look like?
dataset |>
  head() |>
  formattable()
```

------------------------------------------------------------------------

## Describe and Visualize Correlations

[Correlations](https://en.wikipedia.org/wiki/Correlation) are a statistical relationship between two numerical variables, may or may not be causal. Exploring correlations in your data allows you determine data independence, a major [assumption of parametric statistics](https://www.statology.org/parametric-tests-assumptions/), which means your variables are both randomly collected.

#### If you're interested in some underlying statistics...

Note that the `dlookr` default correlation is the [Pearson's $r$ coefficient](https://en.wikipedia.org/wiki/Pearson_correlation_coefficienthttps://en.wikipedia.org/wiki/Pearson_correlation_coefficient), but you can specify any method you would like: `correlate(dataset, method = "")`, where the method can be `"pearson"` for Pearson's $r$, `"spearman"` for [Spearman's](https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient) $\rho$, or `"kendall"` for [Kendall's](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient) $\tau$. The main differences are that Pearson's $r$ assumes a normal distribution for ALL numerical variables, whereas Spearman's $\rho$ and Kendall's $\tau$ do not, but Spearman's $\rho$ requires $N > 10$, and Kendall's $\tau$ does not. Notably, Kendall's $\tau$ performs as well as Spearman's $\rho$ when $N > 10$, so its best to just use Kendall's $\tau$ when data are not normally distributed.

```{r corr}
# Table of correlations between numerical variables (we are sticking to the default Pearson's r coefficient)
correlate(dataset) |>
  formattable()
```

```{r plot-corr}
# Correlation matrix of numerical variables
dataset |>
plot_correlate()
```

------------------------------------------------------------------------

## Visualize Correlations within Groups

If we have groups that we will compare later on, it is a good idea to see how each numerical variable correlates within these groups.

```{r group-plot-corr}
dataset |>
  group_by(Group) |>
  plot_correlate()
```

This is great, we have our correlations within groups! However, the correlation matrices aren't always the most intuitive, so let's plot!

We will be using the `ggpairs()` function within the `GGally` package. Specifically, we are looking at the correlations between predawn leaf water potential `pLWP` and midday leaf water potential `mLWP`. Leaf water potential is a key indicator for how stressed plants are in droughts.

```{r corr-facet-plot}
dataset |> 
  dplyr::select(Group, pLWP, mLWP) |>
  ggpairs(aes(color = Group, alpha = 0.5)) +
  theme(strip.background = element_blank()) + # I don't like facet strip backgrounds...
  scale_fill_OkabeIto() +
  scale_color_OkabeIto()
```

------------------------------------------------------------------------

## Describe and Visualize Relationships Based on Target Variables

------------------------------------------------------------------------

### Target Variables

`Target variables` are essentially numerical or categorical variables that you want to relate others to in a data frame. `dlookr` does this through the `target_by()` function, which is similar to `group_by()` in `dplyr`. The `relate()` function then briefly analyzes the relationship between the target variable and the variables of interest.

The relationships below will have the formula relationship `target ~ predictor`.

------------------------------------------------------------------------

### Numerical Target Variables: Numerical Variable of Interest

`Formula: pLWP (numerical)  ~ Sap_Flow (numerical)`

```{r lm}
# The numerical predictor variable that we want
num <- target_by(dataset, Sap_Flow)

# Relating the variable of interest to the numerical target variable
num_num <- relate(num, pLWP)

# Summary of the regression analysis - the same as the summary from lm(Formula)
summary(num_num)
```

```{r plot-lm}
# Plotting the linear relationship
plot(num_num)
```

------------------------------------------------------------------------

### Numerical Target Variables: Categorical Variable of Interest

Formula: `Group (categorical) ~ pLWP (numerical)`

```{r cat-num}
# The categorical predictor variable that we want
num <- target_by(dataset, pLWP) 

# We need to change Group to a factor
num$Group <- as.factor(num$Group)

# Relating the variable of interest to the numerical target variable
num_cat <- relate(num, Group)

# Summary of the ANOVA analysis - the same as the summary from anova(lm(Formula))
summary(num_cat)
```

```{r plot-cat-num}
plot(num_cat) + 
  theme(axis.text.x = element_blank())
```

------------------------------------------------------------------------

### Categorical Target Variables: Numerical Variable of Interest

Note that this produces descriptive statistics, unlike the other relationships we are looking at.

Formula: `pLWP (numerical) ~ Group (categorical)`

```{r num-cat}
# The categorical predictor variable that we want
categ <- target_by(dataset, Group)

# Relating the variable of interest to the numerical target variable
cat_num <- relate(categ, pLWP)

# Summary of descriptive statistics
summary(cat_num)
```

```{r plot-num-cat}
plot(cat_num) 
```

------------------------------------------------------------------------

### Categorical Target Variables: Categorical Variable of Interest

Notably, there is only one categorical variable... Let's make another:

If $mLWP > mean(mLWP) + sd(mLWP)$ then "Yes", else "No".

```{r new-cat}
# Create new categorical column
cat_dataset <- dataset |>
  select(pLWP, Group) |>
  drop_na() |>
  mutate(HighLWP = ifelse(pLWP > (mean(pLWP + sd(pLWP))), "Yes", "No"))

# New dataset 
head(cat_dataset) |>
  head()
```

Now we have two categories!

Formula = `Group (categorical) ~ HighLWP (categorical)`

```{r cat-cat}
# The categorical predictor variable that we want
categ1 <- target_by(cat_dataset, HighLWP)

# Relating the variable of interest to the categorical target variable
cat_num <- relate(categ1, Group)

# Summary of the Chi-square test for Independence
summary(cat_num)
```

```{r plot-cat-cat}
plot(cat_num)
```

------------------------------------------------------------------------
