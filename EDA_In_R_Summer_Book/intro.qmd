# Introduction

![Image Credit: Choonghyun Ryu](https://choonghyunryu.github.io/dlookr/figures/detective_2.png){fig-align="left" width="214" height="238"}

[Exploratory data analysis](https://en.wikipedia.org/wiki/Exploratory_data_analysis) is an essential first step towards determining the validity of your data and should be performed throughout the data pipeline. However, EDA is often performed too late or not at all. The [R programming language](https://en.wikipedia.org/wiki/R_(programming_language)), specifically through the [RStudio IDE](https://en.wikipedia.org/wiki/RStudio), is widely used open source platform for [data analysis](https://en.wikipedia.org/wiki/Data_analysis) and [data visualization](https://en.wikipedia.org/wiki/Data_and_information_visualization). This is because of the extensive variety of packages available and attentive community devoted to data analysis. Consequently, there are several exploratory data analysis [packages](https://arxiv.org/pdf/1904.02101.pdf), each of which have their own pros and cons.

Here, we utilize the [dlookr package](https://github.com/choonghyunryu/dlookr) to conduct preliminary exploratory data analysis aimed at diagnosing any major issues with an imported data set. dlookr offers a clean and straightforward methodology to uncover issues such as data [outliers](https://en.wikipedia.org/wiki/Outlier), [missing data](https://en.wikipedia.org/wiki/Missing_data), as well as summary statistical reports.

------------------------------------------------------------------------

### What is exploratory data analysis?

Exploratory data analysis is a [statistical](https://en.wikipedia.org/wiki/Statistics), approach towards analyzing [data sets](https://en.wikipedia.org/wiki/Data_set) to investigate and summarize their main characteristics, often through [statistical graphics](https://en.wikipedia.org/wiki/Statistical_graphics) and other data visualization methods.

```{r, echo = FALSE, message = FALSE}
pacman::p_load(colorblindr, colorspace, dlookr, formattable, GGally, ggpubr, here, tidyverse)


theme_set(theme_pubclean(base_size = 16))
theme_update(axis.title = element_text(hjust = 1))

dataset <- read.csv(here("EDA_In_R_Summer_Book", "data", "diabetes.csv")) |>
  mutate(Age_group = ifelse(Age >=21 & Age <= 30, "Young", 
                            ifelse(Age > 30 & Age <=50, "Middle", 
                                   "Elderly")),
         Age_group = fct_rev(Age_group))

dataset |> 
  select(Age_group, Glucose, Insulin, BMI) |>
  ggpairs(aes(color = Age_group, alpha = 0.5)) +
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        strip.background = element_blank()) + 
  scale_fill_OkabeIto() +
  scale_color_OkabeIto()
```

------------------------------------------------------------------------

## **What are some important data set characteristics?**

There are several characteristics that are arguably important, but we will only consider those covered in this workshop.

## Diagnostics

When importing data sets, it is important to consider characteristics about the data columns, rows, and individual cells.

------------------------------------------------------------------------

### Variables

Name of each variable

```{r, echo = FALSE, message = FALSE}
head(dataset) |>
  formattable::formattable()
```

### Types

Data type of each variable

```{r, echo = FALSE, message = FALSE}
dlookr::diagnose(dataset) |>
  select(variables, types) |>
  formattable::formattable()
```

#### **Numerical**: Continuous

Measurable numbers that are fractional or decimal and cannot be counted (e.g., time, height, weight)

```{r, echo = FALSE, message = FALSE}
dataset |> 
  ggplot(aes(x = BMI)) +
  geom_line(stat = "bin", binwidth = 5, color = "#4E84C4", size = 2) 
```

#### **Numerical**: Discrete

Countable whole numbers or integers (e.g., number of successes or failures)

```{r, echo = FALSE, message = FALSE}
dataset |> 
  ggplot(aes(x = Outcome, group = Age_group, fill = Age_group)) +
  geom_histogram(position = position_dodge2(), binwidth = 1) +
  guides(fill = guide_legend(title = "Age Group")) +
  theme(axis.ticks = element_blank()) +
  scale_x_continuous(labels = c("", "0", "", "1", "")) +
  scale_fill_OkabeIto()
```

------------------------------------------------------------------------

#### **Categorical**: Nominal

Labeling variables without any order or quantitative value (e.g., hair color, nationality)

```{r, echo = FALSE, message = FALSE}
dataset |> 
  mutate(Outcome = ifelse(Outcome == "0", "No", "Yes")) |>
  ggplot(aes(x = Outcome, y = BMI, color = Outcome)) +
  geom_jitter(size = 2, alpha = 0.75, width = 0.1) +
  theme(legend.position = "none") +
  scale_color_OkabeIto()
```

#### **Categorical: Ordinal**

Where there is a hierarchical order along a scale (e.g., ranks, letter grades, age groups)

```{r, echo = FALSE, message = FALSE}
dataset |> 
  ggplot(aes(x = Age_group, y = BMI, color = Age_group)) +
  geom_jitter(size = 2, alpha = 0.75, width = 0.1) +
  xlab("Age group") +
  theme(legend.position = "none") +
  scale_color_OkabeIto()
```

### Missing values

AKA "NAs", representing cells, rows, or columns without data \* Missing percent: percentage of missing values \* Unique count: number of unique values \* Unique rate: rate of unique value - unique count / total number of observations

```{r}
dataset |>
  dplyr::mutate_all(~ifelse(sample(c(TRUE, FALSE), size = length(.), replace =
                                     TRUE, prob = c(0.8, 0.2)),
                            as.character(.), NA)) |>
  head() |>
  formattable::formattable()
```

------------------------------------------------------------------------

## Summary Statistics

Above we described some properties of data. However, you will need to know some descriptive characteristics of your data before you can move forward. Enter, [summary statistics](https://en.wikipedia.org/wiki/Summary_statistics).

Summary statistics allow you to summarize large amounts of information about your data as quickly as possible.

### Central Tendency

Measuring a central property of your data. Some examples you've probably heard of are:

-   Mean: Average value

-   Median: Middle value

-   Mode: Most common value

```{r, echo = FALSE, message = FALSE}
p_BMI <- dataset |>
  ggplot(aes(x = BMI)) +
  geom_density(size = 2) +
  stat_central_tendency(type = "mean", color = "red", linetype = 2, size = 1.5) +
  stat_central_tendency(type = "median", color = "#0072B2", linetype = 2, size = 1.5) +
  stat_central_tendency(type = "mode", color = "#999999", linetype = 2, size = 1.5) +
  theme(axis.title.y = element_blank())

p_Ins <- dataset |>
  ggplot(aes(x = Insulin)) +
  geom_density(size = 2) +
  stat_central_tendency(type = "mean", color = "red", linetype = 2, size = 1.5) +
  stat_central_tendency(type = "median", color = "#0072B2", linetype = 2, size = 1.5) +
  stat_central_tendency(type = "mode", color = "#999999", linetype = 2, size = 1.5) +
  theme(axis.title.y = element_blank())

ggarrange(p_BMI, p_Ins, 
          ncol = 1, nrow = 2)
```

Notice however, that all values of central tendency can be pretty similar, such as in the top panel. This will become important when we discuss data transformations in Chapter 3.

### Statistical Dispersion

Measure of data variability, scatter, or spread. Some examples you may have heard of:

-   Standard deviation (SD): The amount of variation that occurs in a set of values.

-   Interquartile range (IQR): The difference between the 75th and 25th percentiles

```{r}
dataset |> 
  ggplot(aes(x = BMI)) +
  geom_histogram(fill = "#4E84C4", size = 2, bins = 40) +
  geom_vline(aes(xintercept = mean(BMI) - sd(BMI)), size = 1.5, linetype = "dashed") + 
  geom_vline(aes(xintercept = mean(BMI) + sd(BMI)), size = 1.5, linetype = "dashed") +
  geom_segment(aes(y = 30, yend = 30, x = mean(BMI) - sd(BMI) + 1, xend = mean(BMI) + sd(BMI) - 1), size = 1.5) +
  geom_point(aes(y = 30, x = mean(BMI)), size = 5) +
  geom_segment(aes(y = 32, yend = 45, x = mean(BMI) + 1.5, xend = 50)) +
  geom_segment(aes(y = 30, yend = 35, x = mean(BMI) + sd(BMI), xend = 50)) +
  annotate(geom = "text", x = 54, y = 45, label = "Mean", size = 6) +
  annotate(geom = "text", x = 52.5, y = 35, label = "SD", size = 6) 

  
```
